/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.urbanplanning3;

import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.awt.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Cityrequirements extends javax.swing.JFrame {

    /**
     * Creates new form
     */

    String sym11[] = null,min11[],max111[],buildinginv111[];
    int len;
    public Cityrequirements() {
        initComponents();
        
        addRowtoJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        row1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        column1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        areapane = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        confirm = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        confirm1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Please enter the city requirements:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("City Requirements");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText(" (Example: 20 x 20)");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Area = ");

        row1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                row1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("x");

        column1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                column1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel6.setText("row");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel7.setText("column");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel11.setText("Please enter the number of areas required by every ");

        jScrollPane1.setViewportView(areapane);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Example: A=1 Area");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setText("building (represented by their own symbol) :");

        jPanel2.setBackground(new java.awt.Color(0, 102, 0));
        jPanel2.setForeground(new java.awt.Color(0, 102, 102));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("References:");

        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Symbol", "Minimum Block", "Maximum Block", "Description"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        confirm.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        confirm.setText("Confirm");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        edit.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        edit.setText("Clear");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        confirm1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        confirm1.setText("Confirm");
        confirm1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirm1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(row1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel7))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(column1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(10, 10, 10)
                                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirm1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel3)
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(row1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(column1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(confirm)
                                    .addComponent(edit))
                                .addGap(0, 0, 0)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6)
                .addComponent(jLabel11)
                .addGap(1, 1, 1)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirm1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void column1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_column1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_column1ActionPerformed

    private void row1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_row1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_row1ActionPerformed
    Boolean enter2=false;
    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        // TODO add your handling code here:
        try{
        if (Integer.parseInt(row1.getText()) < 20 && Integer.parseInt(column1.getText()) < 20) {
            JOptionPane.showMessageDialog(this, "The minimum value for row and column is 20.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            row1.setText("");
            column1.setText("");
        } else if (Integer.parseInt(row1.getText()) < 20) {
            JOptionPane.showMessageDialog(this, "The minimum value for row is 20.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            row1.setText("");
        } else if (Integer.parseInt(column1.getText()) < 20) {
            JOptionPane.showMessageDialog(this, "The minimum value for column is 20.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            column1.setText("");
        
        
        } else if (Integer.parseInt(column1.getText()) > 100&&Integer.parseInt(row1.getText()) > 10) {
            JOptionPane.showMessageDialog(this, "The maximum value for column and row is 100 respectively.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            column1.setText("");
            row1.setText("");
        } else if (Integer.parseInt(column1.getText()) > 100) {
            JOptionPane.showMessageDialog(this, "The maximum value for column is 100.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            column1.setText("");
        
        } else if (Integer.parseInt(row1.getText()) > 100) {
            JOptionPane.showMessageDialog(this, "The maximum value for row is 100.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            row1.setText("");
        
        }
        else if (Integer.parseInt(row1.getText()) >= 20 && Integer.parseInt(column1.getText()) >= 20) {
            row1.setEditable(false);
            column1.setEditable(false);
            JOptionPane.showMessageDialog(this, "Confirmed. \nPlease click \"Clear\" if you want to reenter the value for row and column again.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            enter2=true;
        } 
        }catch(NumberFormatException e1){
            JOptionPane.showMessageDialog(this, "Please enter integer numbers.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            
        }
    }//GEN-LAST:event_confirmActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        row1.setEditable(true);
        column1.setEditable(true);
        row1.setText("");
        column1.setText("");
    }//GEN-LAST:event_editActionPerformed
    int area1, count1 ,count,min[] = null,max[] = null,area[] = null;
    String sym[] = null,min1[],max1[],buildinginv[];
    private void confirm1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirm1ActionPerformed
        // TODO add your handling code here:
         int a = 0;
         String A;
        if(!enter2)
            JOptionPane.showMessageDialog(this, "Please enter the value of row and column.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
        else{
            //int area1, count1 = 0,count=0,min[] = null,max[] = null,area[] = null;
            //String sym[] = null,min1[],max1[],buildinginv[];
            try{
                Scanner sc=new Scanner(new FileInputStream("pas.txt"));
                count=0;
                while(sc.hasNextLine()){
                    A=sc.nextLine();
                    if(!A.isEmpty()&&!A.isBlank()){
                    if(count==0){                       
                        a=Integer.parseInt(A);


                    }
                    else if(count==1){
                        sym=A.split(" ");
                        
                    }else if(count==2){
                        min1=A.split(" ");
                        /*
                        for(int g=0;g<min1.length;g++){
                            min[g]=Integer.parseInt(min1[g]);
                        }
                        */
                    }
                    else if(count==3){
                        max1=A.split(" ");
                        /*
                        for(int g=0;g<max1.length;g++){
                            max[g]=Integer.parseInt(max1[g]);
                        }
                        */
                    }
                    else if(count==4)
                        buildinginv=A.split("=");
                    count++;
                }
                
            }sc.close();}catch(FileNotFoundException e ){
                JOptionPane.showMessageDialog(this, "File Not Found.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            }

            String symb[]=new String[a];
            Boolean test1 = true, test2 = false;
            try {
                PrintWriter p1 = new PrintWriter(new FileOutputStream("area.txt"));
                String areaa = areapane.getText();
                p1.print(areaa);
                p1.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Problem with file output.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
            }
            //String[] test5 = null;
            //Boolean numcheck = true;
            String aaa;
            Boolean enterb = true;
            Boolean test11=true;
            int[]firstarea = null;
            String[] test4 = null ;
            //int u = 0,k=0;
            
               try {
                
                count1=0;
                Scanner sp1 = new Scanner(new FileInputStream("area.txt"));
                while (sp1.hasNextLine()) {
                    aaa=sp1.nextLine();
                    if(!aaa.isEmpty() && !aaa.isBlank())
                    count1++;
                }
                if(count1==0){
                    test11=false;
                    JOptionPane.showMessageDialog(this, "Please reenter the area again.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                }
                else{
                firstarea=new int [count1];
                test4=new String[count1];//JOptionPane.showMessageDialog(this, count1, "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                
                if (count1 > a) {
                    enterb = false;
                    JOptionPane.showMessageDialog(this, "Please make sure that you have entered the value row-by-row.It seems like you have entered a few extra symbols. ", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                    count1=0;
                } else if (count1 <a) {
                    enterb = false;
                    JOptionPane.showMessageDialog(this, "Please make sure that you have entered the value row-by-row. It seems like you have missed out a few buildings. ", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                    count1=0;
                }
                }
                sp1.close();
            }
               
            catch(FileNotFoundException e){
            }
             
            int areA[]=new int[count1];
Boolean numcheck=true;
String linelo[];
String linelog[]=new String [count1];
if(enterb){
	try{
		Scanner pw=new Scanner(new FileInputStream("area.txt"));
		String gg;
                Boolean test555=true;
                String opr=null;
		int c=0,d=0;
		while(pw.hasNextLine()){
			gg=pw.nextLine();
                        if(gg.contains("="))
                            opr="=";
                        else if(gg.contains(":"))
                            opr=":";
                        else if(!gg.contains(":")&&!gg.contains("=")){
                            JOptionPane.showMessageDialog(this, "Please put in '=' or ':' to connect the symbol and the area.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                            test555=false;
                        }if(!gg.isEmpty() && !gg.isBlank()&&test555){
				gg=gg.replaceAll("\\s","");
				areA[c]=Integer.parseInt(gg.replaceAll("\\D+", ""));
				c++;
				linelo=gg.split(opr);
                                if(linelo.length>2){
                                    JOptionPane.showMessageDialog(this, "Please put only one '=' or ':' to connect the symbol and the area.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                                    test555=false;
                                    break;
                                }
                                else{
                                    if(linelo[1].contains("-1")){
                                        test555=false;
                                        test2=false;
                                        JOptionPane.showMessageDialog(this, "The value cannot be less than 0.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                                    }else{
                                    int x=Integer.parseInt(linelo[1].replaceAll("\\D+", ""));
				linelog[d]=linelo[0];
				d++;}}

			}
		}
    if(test555){
		int counting=0;
		for(int f=0;f<count1;f++){
			String search=linelog[f];
			for(int v=0;v<count1;v++){
				if(search.equals(linelog[v]))
					counting++;
			}
			if(counting>1){
				test1=false;
				JOptionPane.showMessageDialog(this, "The symbol used, " + search+ " has been repeated. \nPlease check again.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
				break;
			}
                        counting=0;
		}
                Boolean testtt[]=new Boolean[count1];
                int e=0;
		if(test1){
			for(int w=0;w<count1;w++){
				for(int z=0;z<count1;z++){
					if(linelog[w].equals(sym[z])){
						test2=true;
					}
				}
				if(!test2){
					JOptionPane.showMessageDialog(this, linelog[d]+ " is not found.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
					break;
				}
                                testtt[e]=test2;
                                e++;
				test2=false;
			}
		}
                for(int x=0;x<count1;x++){
                    if(testtt[x]==false){
                        test2=false;
                        break;
                    }
                    test2=true;
                }
                
		if(test2&test1){
			for(int b=0;b<count1;b++){
				if(areA[b]<0){
					numcheck=false;
					JOptionPane.showMessageDialog(this,"The value of area must more than 0.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
				}
                                else if(areA[b]>15
                                        ){
                                    numcheck=false;
					JOptionPane.showMessageDialog(this,"The area entered is too big.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                                }
                                
			}
		}
                                    
    }
    else{
        test1=false;
        test2=false;
        numcheck=false;
    }
    pw.close();
	}catch(FileNotFoundException e){
            test2=false;
            test1=false;
            numcheck=false;
            JOptionPane.showMessageDialog(this,"File Not Found.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
        }catch(NumberFormatException e1){
            test2=false;
            test1=false;
            numcheck=false;
            JOptionPane.showMessageDialog(this,"Please enter integer value to set the number of area.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
        }
        if(test1&&test2&&numcheck){
        try{
            Scanner sss=new Scanner(new FileInputStream("area.txt"));
            PrintWriter ppp=new PrintWriter(new FileOutputStream("allinputs.txt",true));
            String gg;
            int c=0,d=0;
            int areaaa[]=new int[count1];
            while(sss.hasNextLine()){
                //////
			gg=sss.nextLine();
			if(!gg.isEmpty() && !gg.isBlank()){
				gg=gg.replaceAll("\\s","");
				ppp.print(Integer.parseInt(gg.replaceAll("\\D+", ""))+" ");
				

			}
		}
                /////
                ppp.println();
                ppp.println(row1.getText());
                ppp.print(column1.getText());
                ppp.flush();
                sss.close();
                
            
        }catch(IOException e){
            
        }
        try{
            PrintWriter p12=new PrintWriter(new FileOutputStream("rnc.txt"));
            p12.print(row1.getText()+" "+column1.getText());
            p12.close();
        }catch(IOException e){
            
        }
        }
        if(test1&&test2&&numcheck){
                    //JOptionPane.showMessageDialog(this,test1&&test2&&numcheck, "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                    UrbanPlanning ub=new UrbanPlanning();
                    int aaa1=0;
                    boolean great=true;
                        try{
                            Scanner sc=new Scanner(new FileInputStream("fail.txt"));
                            while(sc.hasNextLine()){
                                aaa1=Integer.parseInt(sc.nextLine().replaceAll("\\D+", ""));
                            }
                        if(aaa1==1){
                            JOptionPane.showMessageDialog(this,"Please enter smaller value of the area requirements of buildings.", "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                            great=false;
                        }
                    }catch(FileNotFoundException e){
                        
                    }
                    Road3 r3=new Road3();
                    if(great){
                    //subway5 s5=new subway5();
                    FirstMap m2=new FirstMap();
                    //SecondMap m2=new SecondMap();
                    
                        m2.setVisible(true);
                        m2.pack();
                        m2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                        m2.setLocationRelativeTo(null);
                        this.dispose();}
                }
}
        }
    }//GEN-LAST:event_confirm1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                        Enter m1=new Enter();
                        m1.setVisible(true);
                        m1.pack();
                        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                        m1.setLocationRelativeTo(null);
                        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public class User{
        public String symbol;
        public String mini_block;
        public String maxi_block;
        public String descr;

        public User(String symbol, String mini_block, String maxi_block, String descr) {
            this.symbol = symbol;
            this.mini_block = mini_block;
            this.maxi_block = maxi_block;
            this.descr = descr;
        } 
    }
    //tring sym[] = null,min1[],max1[],buildinginv[];
    
    public ArrayList ListUsers(){
        ArrayList<User>list=new ArrayList<User>();
        for(int r=0;r<len;r++){
            User u1=new User(sym11[r],min11[r],max111[r],buildinginv111[r]);
            list.add(u1);
        }
        return list;
    }
    public void addRowtoJTable(){
        ////////////////
        String A1;
        int count11=0;
        try{
            Scanner sp=new Scanner(new FileInputStream("pas.txt"));
            //////////////////
            while(sp.hasNextLine()){
                    A1=sp.nextLine();
                    if(!A1.isEmpty()&&!A1.isBlank()){
                    if(count11==0){                 
                        len=Integer.parseInt(A1);
                    }
                    else if(count11==1){
                        sym11=A1.split(" ");
                        //JOptionPane.showMessageDialog(this, sym11[0]+" "+sym11[1], "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
                        
                    }else if(count11==2){
                      
                        min11=A1.split(" ");
                        /*
                        for(int g=0;g<min1.length;g++){
                            min[g]=Integer.parseInt(min1[g]);
                        }
                        */
                    }
                    else if(count11==3){
                        max111=A1.split(" ");
                        /*
                        for(int g=0;g<max1.length;g++){
                            max[g]=Integer.parseInt(max1[g]);
                        }
                        */
                    }
                    else if(count11==4)
                        buildinginv111=A1.split("=");
                    count11++;
                }
            }
            sp.close();
            //////////////////
        }catch(FileNotFoundException e){
            
        }
        ////////////////
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        //JOptionPane.showMessageDialog(this, sym11[0]+" "+min11[0]+" "+max111[0]+" "+buildinginv111[0], "Short Note:", JOptionPane.PLAIN_MESSAGE, null);
        ArrayList<User>list=ListUsers();
        Object rowData[]=new Object[len];
        for(int g=0;g<list.size();g++){
            rowData[0]=list.get(g).symbol;
            rowData[1]=list.get(g).mini_block;
            rowData[2]=list.get(g).maxi_block;
            rowData[3]=list.get(g).descr;
            model.addRow(rowData);
        }
    }
    /**
     * @param args the command line arguments
     */
   
    public static void main(String args[]) {
        Enter entr=new Enter();
     
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cityrequirements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cityrequirements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cityrequirements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cityrequirements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cityrequirements().setVisible(true);
            }
        });
       
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane areapane;
    private javax.swing.JTextField column1;
    private javax.swing.JButton confirm;
    private javax.swing.JButton confirm1;
    private javax.swing.JButton edit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField row1;
    // End of variables declaration//GEN-END:variables

}
